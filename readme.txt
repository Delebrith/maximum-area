Warsaw University of Technology
Faculty of Electronics and Information Technologies
Paulina Szwed, 277343


MAXIMUM AREA

Given a set of 2-dimentional vectors with unnormalized length, programme needs to find order of vectors, so that
polyline starting at (0,0) point, whose segments are created by consecutive vectors, circles maximum area. One may assume that
the last vertex is automatically connected to (0,0) point. Programme presents two solutions: algorythm based on permutations
and one based on sorting.


SOLUTIONS

#1 Permutations

Programme finds all possible permutations of given set, then constructs polygons and calculates which of them has biggest
area.

#2 Sorting

Programme calculates value of angle between vector and X axis. Then, using merge sort procedure, creates lists of vectors
sorted by angle ascending and descending. Programme shifts vectors inside list so that every vector is first on the list once
and after every shift constructs polygon and calculates area to choose the order with biggest area.


EXECUTION MODES

Programme can be started from terminal in 4 modes:

#1 Programme reads data about vectors from text file:

java -jar maximum-area-executable.jar m1 <filename>

Data in file may be generated by external generator:

java -jar vectorgenerator.jar -m2 <amount of vectors> <filename>

#2 Programme reads data generated by external generator from standard input stream:

java -jar vectorgenerator-executable.jar m1 <amount of vectors> | java -jar maximum-area-executable.jar m2

3# Programme generates random values for vectors itself with inner generator and proceeds with time measurement for
different cases (both algorythms). Result is saved in results.txt file:

java -jar maximum-area-executable.jar m3 <start amount of vectors> <end amount of vectors> <loops for measurement for amount>

4# Programme generates random values for vectors itself and proceeds with time measurement for sorting algorytm. Result is
saved in sorting_results.txt file:

java -jar maximum-area-executable.jar m4 <start amount of vectors> <end amount of vectors> <loops for measurement for amount>

5# As an extra module there is also version of the programme with graphic user interface. This version has internal vector
generator and displays all orders found for this case by permutations and one order found by sorting algorithm and shows the
process and result in standard output stream.


INPUT

All input data is given as two distance values: one in X-direction and the other in Y-direction. Distance is measured from
anchorage point to the end of vector. Values for consecutive vectors are located in separate line. The two values are separated
with single space.


OUTPUT

Data in results.txt file is stored in three columns separated with two tabulations. First represents amount of vectors considered
in certain stage. Second is execution time for permutation algorithm. Third is execution time for sorting algorithm.
Data stored in sorting_results.txt is created in similar way, but it has two columns.
Additionally, for m1 and m2 programme shows found order of vectors in standard output stream.

*If no order of vectors creates a polygon the result is empty.

CODE

Programme consists of 4 main packages:
#1 model
This package includes classes representing geometric figures such as LineSegment, Polygon, Vector and Vertex.
2# solutions:
This package contains two classes, each representing one of considered algorithms.
3# utils
Package containing useful classes supporting solutions, creation objects of model, generating data and time measurements
for presented solutions.
4# exceptions
Package contains one custom exception.


